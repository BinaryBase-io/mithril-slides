# module
search = {}

# model
class DuckDuckGo
  constructor: (data) ->
    tokens = data.Result.replace(/^<a[^>]+>/, "").split("</a>")
    @title = m.prop tokens[0]
    @desc  = m.prop tokens[1].replace(" - ", "")
    @url   = m.prop data.FirstURL
  @query: (queryString) ->
    q   = encodeURIComponent(queryString).replace(/%20/g, "+")
    url = "http://api.duckduckgo.com/?q=#{q}&format=json"
    # console.log "GET #{url}"
    m.request url: url, dataType: "jsonp"    

# controller
search.controller = ->
  ctrl =
    queryString: m.prop "DuckDuckGo"
    queryResults: m.prop []
    query: ->
      DuckDuckGo.query(ctrl.queryString()).then (data) ->
        # console.log JSON.stringify(data, null, "\t")
        results = ctrl.queryResults()
        results.splice 0, results.length
        for r in data.RelatedTopics
          if r.Result? and r.FirstURL?
            results.push new DuckDuckGo(r)
    reset: ->
      console.log ctrl.queryString()
      ctrl.queryString ""
  ctrl.query()
  ctrl  # http://goo.gl/IxfhTA

# view utility
search.cancelEvent = (e) ->
  e.preventDefault()
  e.stopPropagation()

# view
search.view = (ctrl) ->
  m "div.container", [
    m "h1.page-header", "A Search Application"
    m "form[role=form]", onsubmit: search.cancelEvent, [
      m "div.input-group", [
        m "input[type=text].form-control",
          onchange: m.withAttr "value", ctrl.queryString
          value: ctrl.queryString()
        m "span.input-group-btn", [
          m "button[type=button].btn.btn-default", onclick: ctrl.query, "Search"
        ]
      ]
    ]
    m "ul.media-list", ctrl.queryResults().map (result, index) ->
      m "li.media", [
        m "div.media-body", [
          m "h4.media-heading", [
            m "a",
              href: result.url()
              target: "_blank"
            , result.title()
          ]
          m "p.text-success", result.url()
          m "p", result.desc()
        ]
      ]
  ]

# initialize
m.module document.body, search
